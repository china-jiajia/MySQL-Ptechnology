
一、流程控制的使用
	.存储过程和函数中可以使用流程控制来控制语句的执行。
	.MySQL中可以使用IF语句、CASE语句、LOOP语句、LEAVE语句、ITEARTE语句、REPEAT语句和WHILE语句来进行流程控制、
	.每个流程中可能包含一个单独语句，或者是使用BEGIN...END构造的复合语句，构造可以被嵌套

	1.IF语句
		.IF语句用来进行条件判断。根据是否满足条件，将执行不同的语句。语法如下:
IF search_condition THEN statement_list [ELSEIF search_condition THEN statement_list] ... [ELSE statement
_list ]
END FI 


		.search_condition:参数表示条件判断语句
		.stagement_list:表示不同条件的语句

		注释:MySQL还有一个IF()函数，它不同于这里描述的IF语句

		.例如:
IF age>20 THEN SET @count1=@count1+1;
ELSEIF age=20 THEN SET @count2=@count2+1;
ELSE SET @count3=@count3+1;
END IF;


	2.CASE语句(CASE语句也用来进行条件判断，其可以实现比IF语句更复杂的条件判断)；CASE语句的基本形式:
CASE case_value WHEN when_value THEN statement_list [WHEN when_value THEN statement_list] ... [ELSE statement_list] END CASE

	 	.case_value:参数表示条件判断的变量
	 	.when_value:表示变量的取值
	 	.statement_list:表示不同when_value值的执行语句

CASE WHEN search_condition THEN statement_list [WHEN search_condition THEN statement_list] ... [ELSE statement_list] END CASE

		.search_condition:表示条件判断语句
		.statement_list:表示不同条件的之心语句

CASE age WHEN 20 THEN SET @count1=@count1+1;
ELSE SET @count2=@count2+1;
END CASE;


CASE 
WHEN age=20 THEN SET @count1=@count1+1;
ELSE SET @count2=@count2+1;
END CASE;


	注释:CASE语句和"流程控制"里描述的SQL CASE表达式的CASE语句有轻微不同;CASE语句不能有ELSE NULL 子句，并且用END CASE替代END来终止！！



	3.LOOP语句(LOOP语句可以使某些特定的语句重复执行,实现一个简单的循环;但是LOOP语句本身没有停止循环的语句，必须遇到LEAVE语句才能停止循环)LOOP语法:
[begin_label:] LOOP
statement_list
END LOOP [end_label]

		.begin_label:参数和end_label参数分别表示循环开始和结束的标志，这两个标志必须相同，而且都可以省略
		.statement_list:参数表示需要循环执行的语句

		例如:
add_num: LOOP
SET @count=@count+1;
END LOOP add_num;

		#因为没有跳出循环的语句，这个循环成了一个死循环；LOOP循环都以END LOOP结束。

	4.LEAVE语句(LEAVE语句主要用于跳出循环控制)；语法如下:
		.LEAVE label

			.label:参数表示循环的标志

		例如:
add_num: LOOP
SET @count=@count+1;
IF @count=100 THEN
LEAVE add_num;
END LOOP add_num;

	5.ITERATE语句
		.ITERATE语句也是用来跳出循环的语句。但是，TTEATE语句是跳出本次循环，然后直接进入限一次循环
		.ITERATE语句只可以出现在LOOP、REPEAT、WHILE语句内

		.ITERATE语句:
			.ITERATE label;

			.lable:参数表示循环的标志
add_num: LOOP
SET @count=@count+1;
IF @count=100 THEN
LEAVE add_num;
ELSE IF MOD(@count,3)=0 THEN
ITERATE add_num;
SELECT * FROM employee;
END LOOP add_num;

		#count加1的操作，count值为100时结束循环。如果count的值能够整除3，则跳出本次循环，不在执行下面的SELECT语句。

		注释:LEAVE语句是跳出整个循环，然后在执行后面的程序;而ITERATE语句是跳出本次循环，然后进入下一次循环。


	6.REPEAT语句:
		.REPEAT语句是有条件控制的循环语句。当满足特定条件时，就会跳出循环语句
		.REPEAT语法:
			[begin_label:] REPEAT
			statement_list UNTIL search_condition END REPEAT [end_label]

			.statement_list:表示循环的执行语句
			.search_condition:表示结束循环的条件，满足该条件时循环结束。

		例如:
REPEAT
SET @count=@count+1;
UNTIL @count=100
END REPEAT;

		#REPEAT循环都是用END REPEAT结束。


	7.WHILE语句
		.WHILE语句也是有条件控制的循环语句。但WHILE语句和REPEAT语句是不一样的。
		.WHILE语句是满足条件时，执行循环内的语句
		.WHILE语法如下:
			[begin_label:] WHILE search_condition DO statement_list END WHILE [end_lable]

				.search_condition:表示循环执行的条件，满足该条件循环执行
				.statement_list:参数表示循环的执行语句

		例如:
WHILE @count<100 DO
SET @count=@count+1;
END WHILE;


二、调用存储过程和函数
	.存储过程和函数都是存储在服务器端的SQL语句集合，要使用这些已经定义好的存储过程和存储函数就必须要通过调用的方式来实现
	.存储过程是通过CALL语句来调用的；而存储函数的使用方法与MySQL内部函数的使用方法是一样的。
	.执行存储过程和函数需要EXECUTE权限;EXECUTE权限的信息存储在information_schem数据库下的user_privilegeges表中
		.select * from information_schema.user_privileges;

	1.调用存储过程的语句:
		.CALL sp_name([parameter[,...]]);
			.sp_name:存储过程的名字
			.parameter:存储过程的参数

			.CALL proc()

	2.调用存储函数
		.MySQL中,存储函数的使用方法与MySQL内部函数的使用方法是一样的。
		.换言之，用户自己定义的存储函数与MySQL内部函数是一个性质的；区别在于，存储函数是用户自己定义的，而内部函数是MySQL的开发者定义的。

		例如:
--创建存储函数
DELIMITER //
CREATE FUNCTION name_from_t3(id INT)
RETURNS CHAR(80)
RETURN (SELECT NAME FROM t3 WHERE id=id);
//

DELIMITER ;

SELECT name_from_t3(2);

		#根据输入的id值到t3表中查询记录；查询出id字段的值等于id的记录，然后将该记录的name字段的值返回。



三、查看存储过程和函数
	.存储过程和函数创建以后，可以查看存储过程和函数的状态和定义。
	.通过SHOW STATUS语句来查看存储过程和函数的状态，也可以通过SHOW CREATE语句来查看存储过程和函数的定义。
	.通过查看information_schema数据库下的ROUTINES表来查看存储过程和函数的信息。

	1.SHOW STATUS语句来查看存储过程和函数的状态
		SHOW {PROCEDURE|FUNCTION} STATUS [LIKE 'pattern'];

			.PROCEDURE:表示查询存储过程
			.FUNCTION:表示查询存储函数
			.LIKE 'pattern':用来匹配存储过程或函数的名称


		SHOW FUNCTION STATUS LIKE '%name_from_t3%';

		#查询结果显示了函数的创建时间、修改时间和字符集等信息。


		注释:
			.SHOW STATUS语句只能查看存储过程或函数是操作哪一个数据库、存储过程或函数的名称、类型、水定义的、创建和修改时间、字符编码等信息。
			.SHOW  STATUS语句不能查看存储过程和函数的具体定义；需要查看详细定义，需要使用SHOW CREATE语句


	2.SHOW CREATE语句查看存储过程和函数定义
		SHOW CREATE {PROCEDURE|FUNCTION} sp_name;
			.PROCEDURE:表示存储过程
			.FUNCTION:表示函数
			.sp_name:表示存储过程或函数的名称


		.SHOW CREATE FUNCTION name_from_t3;

	3.从information_schema.Routines表中查看存储过程和函数的信息
		.SELECT * FROM information_schema.Routines WHERE ROUTINE_NAME='sp_name';

			.ROUTINE_NAME:表示存储过程或函数的名字

		SELECT * FROM information_schema.Routines WHERE ROUTINE_NAME='name_from_t3';


		注释:
			.information_schema数据库下的Routines表中，存储着所有存储过程和函数的定义。
			.使用SELECT语句查询Routines表中的存储过程和函数的定义时，一定要使用ROUTINE_NAME字段指定存储过程或函数的名称；不然会查询出所有存储过程和函数。



四、修改存储过程和函数
	.修改存储过程和函数是指修改已经定义好的存储过程和函数
	.MySQL中通过ALTER PROCEDURE语句来修改存储过程
	.通过ALTER FUNCTION语句来修改函数

	.MySQL中修改存储过程和函数的语法:
		ALTER{PROCEDUER|FUNCTION} sp_name [characteristic...]
		characteristic:
		{CONTANIS SQL| NO SQL|READS SQL DATA|MODFIES SQD DATA}|SQL SECURITY {DEFINER|INVOKER} |COMMENT 'string'

		.characteristic:表示指定存储函数的特性
		.CONTAINS SQL:表示子程序包含SQL语句，但不包含读或些数据的语句
		.NO SQL:表示子程序中不包含SQL语句
		.READS SQL DATA:表示子程序中包含读数据的语句
		.MODIFIES SQL DATA:表示子程序中包含写数据的语句
		.SQL SECURITY{DEFINER|INVOKER}:指明谁有权限来执行
		.DEFINER:表示只有定义自己才能够执行
		.INVOKER:表示调用者可以执行
		.COMMENT 'string' :是注释信息

		#ALTER PRCEDURE 	修改存储过程、ALTER FUNCTION 	修改函数;它们的参数是相同的
		#修改存储过程和函数，只能修改它们的权限，目前MySQL还不提供对已经存在的存储过程含函数代码的修改;如果要修改，只能通过先DROP掉，然后重新建立新的存储过程和函数来实现

		例如:
DELIMITER //
DROP FUNCTION IF EXISTS 'name_from_t3' //

CREATE DEFINER='root'@'localhost' FUNCTION 'name_from_t3'(id INT) RETURNS CHAR(80) CHARSET utf8 
RETURN (SELECT NAME FROM t3 WHERE id=id) //

DELIMITER ;



	.删除存储过程和函数(删除存储过程和函数指删除库中已经存在的存储过程和函数)
		.DROP {PROCEDURE|FUNCTION} sp_name;

		DROP PROCEDURE Proc;

		DROP FUNCTION name_from_t3;

		SELECT * FROM information_schema.Routines WHERE ROUTINE_NAME='proc' OR ROUTINE_NAME='name_from_t3';





五、总结
	.存储过程里面可以调用其他存储过程，使用CALL语句调用其他存储过程即可
	.存储过程参数列表里的参数名尽量不要和数据库中表的字段名一样，有可能出错
	.存储过程的参数可以使用中文，在定义存储过程的时候加上character set gbk就可以了

	例如:
CREATE PROCEDURE useInfo(IN u_name VARCHAR(50) CHARACTER SET gbk,OUT u_age INT);


	例如:(DECLARE语句要写在存储过程里面，否则会报错)
DROP PROCEDURE IF EXISTS Proc;

DELIMITER //
CREATE PROCEDURE Proc()
BEGIN
DECLARE command_not_allowed CONDITION FOR SQLSTATE '42000';
END //

DELIMITER ;

CALL Proc();


